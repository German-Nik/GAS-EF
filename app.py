import os
import sys
import streamlit as st
import pandas as pd

# --- —á—Ç–æ–±—ã Python –≤–∏–¥–µ–ª –ø–∞–ø–∫—É src ---
sys.path.append(os.path.join(os.path.dirname(__file__), "src"))

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª—è —Ä–∞—Å—á—ë—Ç–æ–≤
import ghg_emission_calc.chem_data as chem_data_module
from ghg_emission_calc.chem_data import COMPONENT_DB as BASE_COMPONENT_DB
from ghg_emission_calc.calculator import (
    ef_from_molar,
    ef_from_mass,
)
from ghg_emission_calc.constants import CO2_DENSITIES

# ----------- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª -----------
def fmt(num, decimals=3):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª —Å –∑–∞–ø—è—Ç–æ–π –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è"""
    if isinstance(num, (int, float)):
        return f"{num:.{decimals}f}".replace(".", ",")
    return str(num)

# ----------------- –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è (–∫—Ä–∞—Å–Ω—ã–µ —Ç–æ–Ω–∞) -----------------
st.set_page_config(page_title="GHG EF ‚Äî –≥–∞–∑ (–ú–µ—Ç–æ–¥–∏–∫–∞ ‚Ññ371)", layout="wide")
st.markdown(
    """
    <style>
      .stApp {
        background-color: #fff5f5;
      }
      h1, h2, h3 {
        color: #b71c1c !important;
      }
      .stButton > button {
        background-color: #d32f2f;
        color: white;
        border-radius: 8px;
        border: none;
      }
      .stButton > button:hover {
        background-color: #b71c1c;
      }
      .stProgress > div > div {
        background: #b71c1c;
      }
    </style>
    """,
    unsafe_allow_html=True,
)

st.title("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—ã–±—Ä–æ—Å–æ–≤ CO‚ÇÇ –¥–ª—è –≥–∞–∑–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞ ")
st.markdown("### –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≤—ã–±—Ä–æ—Å–æ–≤, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ —Ç–æ–ø–ª–∏–≤–∞, –ú–µ—Ç–æ–¥–∏–∫–∞ –ú–ü–† ‚Ññ371")
st.markdown("## * –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –û–û–û ¬´–ö–∞—Ä–±–æ–Ω–õ–∞–±¬ª")

# ---------- Layout ----------
col1, col2 = st.columns([2, 1])

with col1:
    fuel_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–∞", value="–ü—Ä–∏—Ä–æ–¥–Ω—ã–π –≥–∞–∑")

    units = st.radio(
        "–í –∫–∞–∫–æ–º –≤–∏–¥–µ –∑–∞–¥–∞–Ω —Å–æ—Å—Ç–∞–≤?",
        ["–ú–æ–ª—è—Ä–Ω—ã–µ –¥–æ–ª–∏ (–æ–±.% / –º–æ–ª.%)", "–ú–∞—Å—Å–æ–≤—ã–µ –¥–æ–ª–∏ (–º–∞—Å.%)"],
    )

    n = st.number_input("–°–∫–æ–ª—å–∫–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –≤–≤–µ—Å—Ç–∏?", min_value=1, max_value=16, value=3, step=1)

    st.markdown("**–í–≤–æ–¥ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤** (–≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –±–∞–∑—ã –∏–ª–∏ '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π'). –ù—É–ª–µ–≤—ã–µ –¥–æ–ª–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è.")
    rows = []

    # —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞: –ù–∞–∑–≤–∞–Ω–∏–µ + —Ñ–æ—Ä–º—É–ª–∞
    all_options = [f"{v['name']} ({k})" for k, v in BASE_COMPONENT_DB.items()] + ["–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π"]
    mapping = {f"{v['name']} ({k})": k for k, v in BASE_COMPONENT_DB.items()}

    used = set()  # —á—Ç–æ–±—ã –Ω–µ –≤—ã–±–∏—Ä–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ

    for i in range(int(n)):
        # –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã = –≤—Å–µ –º–∏–Ω—É—Å —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ (–Ω–æ '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π' –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞—ë—Ç—Å—è)
        available = [opt for opt in all_options if opt == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π" or opt not in used]

        c0, c1, c2, c3, c4 = st.columns([2, 1, 1, 1, 1])
        comp_display = c0.selectbox(
            f"–ö–æ–º–ø–æ–Ω–µ–Ω—Ç {i+1}",
            options=available,
            key=f"comp_select_{i}",
        )

        if comp_display != "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π":
            used.add(comp_display)

        val = c1.number_input(
            "–î–æ–ª—è (%)",
            min_value=0.0,
            max_value=100.0,
            value=0.0,
            key=f"comp_val_{i}",
            format="%.4f",
        )

        if comp_display == "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π":
            cname = c2.text_input("–ò–º—è", value=f"X{i+1}", key=f"comp_name_{i}")
            cM = c3.number_input("M (–≥/–º–æ–ª—å)", min_value=0.0, value=44.01, key=f"comp_M_{i}")
            cnc = c4.number_input("nC", min_value=0, value=0, step=1, key=f"comp_nC_{i}")
            rows.append({
                "name": cname.strip() or f"X{i+1}",
                "val": float(val),
                "M": float(cM),
                "nC": int(cnc)
            })
        else:
            comp = mapping[comp_display]  # —Ñ–æ—Ä–º—É–ª–∞ (–∫–ª—é—á)
            comp_info = BASE_COMPONENT_DB[comp]
            c2.write(f"M = {fmt(comp_info['M'], 2)}")
            c3.write(f"nC = {comp_info['nC']}")
            c4.write("")
            rows.append({
                "name": comp,
                "val": float(val),
                "M": float(comp_info["M"]),
                "nC": int(comp_info["nC"])
            })

    # ---- –°—É–º–º–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–æ–ª–µ–π ----
    sum_val = sum(r["val"] for r in rows)
    col_sum1, col_sum2 = st.columns([1, 3])
    col_sum1.metric("–°—É–º–º–∞ –¥–æ–ª–µ–π", f"{fmt(sum_val)} %")

    if abs(sum_val - 100) < 1e-6:
        col_sum2.success("‚úÖ –°—É–º–º–∞ = 100 %")
    else:
        col_sum2.info(f"‚ÑπÔ∏è –°—É–º–º–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç 100 % –Ω–∞ {fmt(sum_val - 100)} %")

    # --- –≤—ã–±–æ—Ä —É—Å–ª–æ–≤–∏–π –¥–ª—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ CO‚ÇÇ ---
    temp_choice = st.selectbox(
        "–£—Å–ª–æ–≤–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è (–¥–ª—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ CO‚ÇÇ)",
        [
            "20 ¬∞C; 101,325 –∫–ü–∞ ‚Üí 1,8393 –∫–≥/–º¬≥",
            "0 ¬∞C; 101,325 –∫–ü–∞ ‚Üí 1,9768 –∫–≥/–º¬≥",
            "15 ¬∞C; 101,325 –∫–ü–∞ ‚Üí 1,8738 –∫–≥/–º¬≥",
        ],
        index=0,
    )

    if temp_choice.startswith("0 ¬∞C"):
        rho_co2 = CO2_DENSITIES["0C"]
    elif temp_choice.startswith("15 ¬∞C"):
        rho_co2 = CO2_DENSITIES["15C"]
    else:
        rho_co2 = CO2_DENSITIES["20C"]

    st.subheader("–†–∞—Å—á–µ—Ç –≤—ã–±—Ä–æ—Å–æ–≤ CO‚ÇÇ –ø—Ä–∏ —Å–∂–∏–≥–∞–Ω–∏–∏ –≥–∞–∑–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ —Ç–æ–ø–ª–∏–≤–∞")
    volume_value = st.number_input("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—ë–º –≥–∞–∑–∞", min_value=0.0, value=1000.0, step=100.0)
    volume_unit = st.radio("–ï–¥–∏–Ω–∏—Ü—ã –æ–±—ä—ë–º–∞", ["–º¬≥", "—Ç—ã—Å. –º¬≥"], horizontal=True)

    compute_btn = st.button("üî• –í—ã—á–∏—Å–ª–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã CO‚ÇÇ", key="compute_btn")

with col2:
    st.markdown("### –ë–∞–∑–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ (—Å–ø—Ä–∞–≤–æ—á–Ω–æ)")
    df_comp = pd.DataFrame(
        [
            {
                "–§–æ—Ä–º—É–ª–∞": k,
                "–ù–∞–∑–≤–∞–Ω–∏–µ": v["name"],
                "M (–≥/–º–æ–ª—å)": fmt(v["M"], 2),
                "nC": v["nC"],
            }
            for k, v in BASE_COMPONENT_DB.items()
        ]
    )
    st.dataframe(df_comp, use_container_width=True)

    st.markdown("### üìò –§–æ—Ä–º—É–ª—ã –ø–æ –º–µ—Ç–æ–¥–∏–∫–µ –ú–ü–† ‚Ññ371 (—Å–ø—Ä–∞–≤–æ—á–Ω–æ)")

    st.latex(r"EF_{CO_{2},j,y} = \sum_{i=1}^{n} \left( W_{i,j,y} \times n_{C,i} \right) \times \rho_{CO_{2}} \times 10^{-2}")
    st.caption("–†–∞—Å—á—ë—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≤—ã–±—Ä–æ—Å–æ–≤ CO‚ÇÇ –ø–æ –º–æ–ª—è—Ä–Ω–æ–º—É —Å–æ—Å—Ç–∞–≤—É")

    st.latex(r"EF_{CO_{2},j,y} = \sum_{i=1}^{n} \left( \frac{W_{i,j,y} \times n_{C,i} \times 44{,}011}{M_{i}} \right) \times \rho_{j,y} \times 10^{-2}")
    st.caption("–†–∞—Å—á—ë—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≤—ã–±—Ä–æ—Å–æ–≤ CO‚ÇÇ –ø–æ –º–∞—Å—Å–æ–≤–æ–º—É —Å–æ—Å—Ç–∞–≤—É")

    st.latex(r"E_{CO_{2},y} = \sum_{j=1}^{n} \left( FC_{j,y} \times EF_{CO_{2},j,y} \times OF_{j,y} \right)")
    st.caption("–†–∞—Å—á—ë—Ç –º–∞—Å—Å—ã –≤—ã–±—Ä–æ—Å–æ–≤ CO‚ÇÇ –ø—Ä–∏ —Å–∂–∏–≥–∞–Ω–∏–∏ –æ–±—ä—ë–º–∞ —Ç–æ–ø–ª–∏–≤–∞")

# ----------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ -----------------
if "compute_btn" in locals() and compute_btn:
    # –°–æ–±–∏—Ä–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    temp = {}
    for r in rows:
        if r["val"] <= 0:
            continue
        name = r["name"]
        temp[name] = {"val": r["val"], "M": r["M"], "nC": r["nC"]}

    if not temp:
        st.error("–ù–µ—Ç –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –Ω–µ–Ω—É–ª–µ–≤–æ–π –¥–æ–ª–µ–π.")
        st.stop()

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –±–∞–∑—É
    for name, info in temp.items():
        if name not in chem_data_module.COMPONENT_DB:
            chem_data_module.COMPONENT_DB[name] = {"M": info["M"], "nC": info["nC"]}

    # –†–∞—Å—á—ë—Ç EF
    if units.startswith("–ú–æ–ª—è—Ä"):
        mol_percent = {name: info["val"] for name, info in temp.items()}
        ef_val, _ = ef_from_molar(mol_percent, rho_co2)
    else:
        mass_percent = {name: info["val"] for name, info in temp.items()}
        ef_val, _ = ef_from_mass(mass_percent, rho_co2)

    st.success(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç EF_CO‚ÇÇ = {fmt(ef_val, 5)} —Ç CO‚ÇÇ / —Ç—ã—Å. –º¬≥")

    # –†–∞—Å—á—ë—Ç –≤—ã–±—Ä–æ—Å–æ–≤
    if volume_unit == "–º¬≥":
        volume_thousand = volume_value / 1000.0
    else:
        volume_thousand = volume_value

    emissions = ef_val * volume_thousand  # —Ç CO2

    st.markdown(
        f"### üí® –ò—Ç–æ–≥–æ–≤—ã–µ –≤—ã–±—Ä–æ—Å—ã CO‚ÇÇ: **{fmt(emissions)} —Ç** –ø—Ä–∏ —Å–∂–∏–≥–∞–Ω–∏–∏ **{fmt(volume_value)} {volume_unit}** —Ç–æ–ø–ª–∏–≤–∞ *¬´{fuel_name}¬ª*"
    )